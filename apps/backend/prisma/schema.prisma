// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String @id @default(uuid())
  name              String
  email             String @unique  
  role              Role 
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  artistProfile     ArtistProfile?
  venueProfile      VenueProfile?
}

model ArtistProfile{
  id                String @id @default(uuid())
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String @unique
  artistType        ArtistType
  location          String
  bio               String
  pricePerGig       Decimal? @db.Decimal(10, 2)
  mediaUrls         String[] @default([])
  availability      Json?
  bookings          Booking[] @relation("ArtistBookings")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([artistType, location])
}


//add mediaUrls field to VenueProfile
model VenueProfile{
  id               String @id @default(uuid())
  user             User @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  userId           String @unique
  venueName        String
  location         String
  description      String 
  mediaUrls        String[] @default([])
  bookings         Booking[] @relation("VenueBookings")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([location])
}

model Booking{
  id          String @id @default(uuid())
  artist      ArtistProfile @relation("ArtistBookings", fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId    String  
  venue       VenueProfile @relation("VenueBookings", fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId     String
  date        DateTime
  status      BookingStatus @default(PENDING)
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([artistId, venueId, date])
  @@index([status, date])
}

enum Role{
  ARTIST
  VENUE
}

enum ArtistType{
  DJ
  LIVE_PERFORMER
  SINGER
  INSTRUMENTALIST
  BAND
  OTHER
}

enum BookingStatus{
  PENDING
  ACCEPTED
  REJECTED
}